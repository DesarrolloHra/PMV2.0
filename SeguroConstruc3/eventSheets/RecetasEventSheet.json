{
	"name": "RecetasEventSheet",
	"events": [
		{
			"eventType": "variable",
			"name": "id_receta",
			"type": "number",
			"initialValue": "0",
			"comment": "",
			"isStatic": false,
			"isConstant": false,
			"sid": 601921904475659
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 837686113530457
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "// Array de botones\nconst botones = [\n    { id: \"btn1\", texto: \"CREA RECETA\", funcion: function() { alert(\"CREA RECETA\"); } },\n    { id: \"btn2\", texto: \"CLONAR RECETA\", funcion: function() { alert(\"CLONAR RECETA\"); } },\n\t{ id: \"btn3\", texto: \"CLONAR RECETA DE OTRA EMPRESA\", funcion: function() { alert(\"CLONAR RECETA DE OTRA EMPRESA\"); } },\n\t{ id: \"btn4\", texto: \"RECALCULA\", funcion: function() { alert(\"RECALCULA\"); } },\n\t{ id: \"btn5\", texto: \"FAMILIAS\", funcion: function() { alert(\"FAMILIAS\"); } },\n\t{ id: \"btn6\", texto: \"OCULTOS\", funcion: function() { alert(\"OCULTOS\"); } },\n\t{ id: \"btn7\", texto: \"IMPORTAR\", funcion: function() { alert(\"IMPORTAR\"); } },\n    { id: \"btn8\", texto: \"EXPORTAR\", funcion: function() { alert(\"EXPORTAR\"); } }\n];\n\n// Función para crear y agregar botones al menú\nfunction crearBotones() {\n    const menu = document.getElementById(\"menu\");\n\n    botones.forEach(function(btnInfo) {\n        const btn = document.createElement(\"button\");\n        btn.id = btnInfo.id;\n        btn.className = \"btnMenuP\";\n        btn.textContent = btnInfo.texto;\n        btn.addEventListener(\"click\", btnInfo.funcion);\n        menu.appendChild(btn);\n    });\n}\n\n// Llamar a la función para crear los botones cuando se carga el script\ncrearBotones();\n",
					"disabled": true
				}
			],
			"sid": 520876646258684
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-tap-object",
					"objectClass": "Touch",
					"sid": 903428362133487,
					"parameters": {
						"object": "PanelRojo1"
					}
				}
			],
			"actions": [
				{
					"id": "go-to-layout",
					"objectClass": "System",
					"sid": 301527993069892,
					"parameters": {
						"layout": "MenuDashBoardLayout"
					}
				}
			],
			"sid": 667911128631639
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-tap-object",
					"objectClass": "Touch",
					"sid": 381766188890134,
					"parameters": {
						"object": "PanelRojo1"
					}
				},
				{
					"id": "compare-instance-variable",
					"objectClass": "PanelRojo1",
					"sid": 650035022275102,
					"parameters": {
						"instance-variable": "btnRegresar",
						"comparison": 0,
						"value": "\"RegresarReceta\""
					}
				}
			],
			"actions": [
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 880711507631539,
					"parameters": {
						"layer": "\"detalleReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 890002046749813,
					"parameters": {
						"layer": "\"CreaReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 667200906617112,
					"parameters": {
						"layer": "\"EditReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 877635697567088,
					"parameters": {
						"layer": "\"Recetas\"",
						"visibility": "visible"
					}
				},
				{
					"id": "set-layer-interactive",
					"objectClass": "System",
					"sid": 597064185219603,
					"parameters": {
						"layer": "\"CreaReceta\"",
						"interactive": false
					}
				},
				{
					"id": "set-layer-interactive",
					"objectClass": "System",
					"sid": 858981650948596,
					"parameters": {
						"layer": "\"EditReceta\"",
						"interactive": false
					}
				},
				{
					"id": "set-layer-interactive",
					"objectClass": "System",
					"sid": 354274916889028,
					"parameters": {
						"layer": "\"detalleReceta\"",
						"interactive": false
					}
				},
				{
					"id": "set-layer-interactive",
					"objectClass": "System",
					"sid": 493361586367746,
					"parameters": {
						"layer": "\"Recetas\"",
						"interactive": true
					}
				}
			],
			"sid": 298813038782030
		},
		{
			"eventType": "group",
			"disabled": false,
			"title": "Efectos Menu Superior2",
			"description": "",
			"isActiveOnStart": true,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-start-of-layout",
							"objectClass": "System",
							"sid": 160953810459359
						}
					],
					"actions": [],
					"sid": 594051609423962,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 552465450933878,
									"parameters": {
										"instance-variable": "Selection",
										"comparison": 0,
										"value": "1"
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 613210676818495,
									"parameters": {
										"frame-number": "2"
									}
								}
							],
							"sid": 714937707255130
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "cursor-is-over-object",
							"objectClass": "Mouse",
							"sid": 439575758287134,
							"parameters": {
								"object": "MenuSupBtn"
							}
						}
					],
					"actions": [],
					"sid": 147145776361976,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 291586905811615,
									"parameters": {
										"instance-variable": "Selection",
										"comparison": 0,
										"value": "0"
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 116196478224525,
									"parameters": {
										"frame-number": "1"
									}
								}
							],
							"sid": 617762834946155
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "cursor-is-over-object",
							"objectClass": "Mouse",
							"sid": 434676529356214,
							"parameters": {
								"object": "MenuSupBtn"
							},
							"isInverted": true
						}
					],
					"actions": [],
					"sid": 231378032952794,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 665861172975202,
									"parameters": {
										"instance-variable": "Selection",
										"comparison": 0,
										"value": "0"
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 638695164429518,
									"parameters": {
										"frame-number": "0"
									}
								}
							],
							"sid": 984937023577945
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-tap-object",
							"objectClass": "Touch",
							"sid": 895613956746850,
							"parameters": {
								"object": "MenuSupBtn"
							}
						}
					],
					"actions": [
						{
							"id": "set-animation-frame",
							"objectClass": "MenuSupBtn",
							"sid": 598758670842340,
							"parameters": {
								"frame-number": "2"
							}
						}
					],
					"sid": 490905870029806
				}
			],
			"sid": 236769731589349
		},
		{
			"eventType": "group",
			"disabled": false,
			"title": "Enlaces Menu2",
			"description": "",
			"isActiveOnStart": true,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-tap-object",
							"objectClass": "Touch",
							"sid": 283932482919911,
							"parameters": {
								"object": "MenuSupBtn"
							}
						}
					],
					"actions": [],
					"sid": 237659927206393,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 416197419216268,
									"parameters": {
										"instance-variable": "MenuPirncipalBtn",
										"comparison": 0,
										"value": "\"Ajustes\""
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 337721204563810,
									"parameters": {
										"frame-number": "2"
									}
								},
								{
									"id": "go-to-layout",
									"objectClass": "System",
									"sid": 959189092081841,
									"parameters": {
										"layout": "MesasLayout"
									}
								}
							],
							"sid": 118425471883679
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-tap-object",
							"objectClass": "Touch",
							"sid": 985150945623599,
							"parameters": {
								"object": "MenuSupBtn"
							}
						}
					],
					"actions": [],
					"sid": 661755350121095,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 623516565824300,
									"parameters": {
										"instance-variable": "MenuPirncipalBtn",
										"comparison": 0,
										"value": "\"PuntVenta\""
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 232332951186402,
									"parameters": {
										"frame-number": "2"
									}
								},
								{
									"id": "go-to-layout",
									"objectClass": "System",
									"sid": 352673468845358,
									"parameters": {
										"layout": "PuntoVentaLayout"
									}
								}
							],
							"sid": 861857399641893
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-tap-object",
							"objectClass": "Touch",
							"sid": 548122478514408,
							"parameters": {
								"object": "MenuSupBtn"
							}
						}
					],
					"actions": [],
					"sid": 797362344391767,
					"children": [
						{
							"eventType": "block",
							"conditions": [
								{
									"id": "compare-instance-variable",
									"objectClass": "MenuSupBtn",
									"sid": 775538710001662,
									"parameters": {
										"instance-variable": "MenuPirncipalBtn",
										"comparison": 0,
										"value": "\"MenuDash\""
									}
								}
							],
							"actions": [
								{
									"id": "set-animation-frame",
									"objectClass": "MenuSupBtn",
									"sid": 854262415390607,
									"parameters": {
										"frame-number": "2"
									}
								},
								{
									"id": "go-to-layout",
									"objectClass": "System",
									"sid": 198001709038586,
									"parameters": {
										"layout": "MenuDashBoardLayout"
									}
								}
							],
							"sid": 295544473284383
						}
					]
				},
				{
					"eventType": "block",
					"conditions": [],
					"actions": [],
					"sid": 282449268058204
				}
			],
			"sid": 691107992652803
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-start-of-layout",
					"objectClass": "System",
					"sid": 981175293593013
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "\nObtenerRecetas();\nverDetalles();\n\nconst tipoSelect = document.getElementById('input-tipo');\nconst categoriaSelect = document.getElementById('input-categorias');\nconst familiaSelect = document.getElementById('input-familia');\nconst subfamiliaSelect = document.getElementById('input-subfamilia');\nconst subfamiliaGroup = document.getElementById('subfamilia-group');\nconst buscarInput = document.getElementById('input-buscar');\n\ntipoSelect.addEventListener('change', function() {\n    ObtenerRecetas();\n});\n\ncategoriaSelect.addEventListener('change', function() {\n    ObtenerRecetas();\n});\n\nfamiliaSelect.addEventListener('change', function() {\n    if (familiaSelect.value == '0') {\n        subfamiliaGroup.style.display = 'none';\n        subfamiliaSelect.innerHTML = '<option value=\"0\">Todas</option>';\n    } else {\n        ObtenerSubfamilias(familiaSelect.value);\n    }\n    ObtenerRecetas();\n});\n\nsubfamiliaSelect.addEventListener('change', function() {\n    ObtenerRecetas();\n});\n\nbuscarInput.addEventListener('input', function() {\n    BuscarRecetas();\n});\n\nObtenerFamilias();\n\n\n\nfunction ObtenerRecetas() {\n    const token = runtime.globalVars.Token;\n    if (!token) {\n        console.error(\"No se encontró el token en localStorage\");\n        return;\n    }\n\n    const tipo = document.getElementById('input-tipo').value;\n    const categoria = document.getElementById('input-categorias').value;\n    const id_familia = document.getElementById('input-familia').value;\n    const id_subfamilia = document.getElementById('input-subfamilia').value;\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/recetas', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            token: token,\n            tipo: tipo,\n            categoria: categoria,\n            id_familia: id_familia,\n            id_subfamilia: id_subfamilia\n        })\n    })\n    .then(response => response.ok ? response.json() : Promise.reject('Network response was not ok'))\n    .then(data => {\n        if (data.response) {\n            actualizarTabla(data.data);\n            pintarRecetas(data.data);\n        } else {\n            console.error(\"Error al obtener data recetas: \", data.message);\n        }\n    })\n    .catch(error => console.error('Error en la obtención de datos: ', error));\n}\n\nfunction pintarRecetas(recetas) {\n    const recetasList = document.getElementById('recetas-list');\n    recetasList.innerHTML = ''; // Limpiar las opciones existentes\n    recetas.forEach(receta => {\n        const option = document.createElement('option');\n        option.value = receta.id_receta;\n        option.textContent = `${receta.codigo} - ${receta.nombre}`;\n        recetasList.appendChild(option);\n    });\n\n    recetasList.addEventListener('change', function() {\n        // Puedes mostrar datos adicionales si lo deseas\n    });\n}\n\nfunction ClonarReceta() {\n    const token = runtime.globalVars.Token;\n    if (!token) {\n        console.error(\"No se encontró el token en localStorage\");\n        return;\n    }\n\n    const recetasList = document.getElementById('recetas-list');\n    const idReceta = recetasList.value;\n    const nombre = document.getElementById('input-nombre-clona').value;\n    const codigo = document.getElementById('input-codigo-clona').value;\n\n\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/clona', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            token: token,\n            id_receta: idReceta,\n            nombre: nombre,\n            codigo: codigo\n        })\n    })\n    .then(response => response.ok ? response.json() : Promise.reject('Network response was not ok'))\n    .then(data => {\n        const modalMensaje = document.getElementById('modal-mensaje');\n        const modal = document.getElementById('clonareceta-modal');\n        \n        if (data.response) {\n            modalMensaje.textContent =  data.message;\n        } else {\n            modalMensaje.textContent = data.message;\n        }\n        \n        modal.style.display = \"block\"; // Mostrar el modal\n    })\n    .catch(error => {\n        console.error('Error en la clonación de datos: ', error);\n        const modalMensaje = document.getElementById('modal-mensaje');\n        const modal = document.getElementById('clonareceta-modal');\n        modalMensaje.textContent = \"Error en la clonación de datos.\";\n        modal.style.display = \"block\"; // Mostrar el modal\n    });\n}\n\ndocument.getElementById('clonar-btn').addEventListener('click', function() {\n    ClonarReceta();\n});\n\n// Manejo del cierre del modal\ndocument.querySelector('.clonareceta-modal-close').addEventListener('click', function() {\n    document.getElementById('clonareceta-modal').style.display = \"none\";\n});\n\n\n\nfunction actualizarTabla(data) {\n    const cuerpoTabla = document.getElementById('cuerpo-tabla');\n    cuerpoTabla.innerHTML = ''; // Limpiar la tabla antes de llenarla\n\n    data.forEach(receta => {\n        let fila = document.createElement('tr');\n\n        fila.innerHTML = `\n            <td></td>\n            <td>${receta.codigo}</td>\n            <td>${receta.nombre}</td>\n            <td>${getTipoTexto(receta.tipo)}</td>\n            <td>${getCategoriaTexto(receta.categoria)}</td>\n            <td>${receta.costo}</td>\n            <td>${receta.precio}</td>\n            <td>${receta.porcentaje}</td>\n            <td>${receta.comision}</td>\n            <td>\n               <div class=\"dropdown\">\n    <svg class=\"dropbtn Icono-tabla\" id=\"menuIcon-${receta.id_receta}\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"165\" viewBox=\"0 0 300 165\">\n        <defs>\n            <clipPath id=\"clip-icono\">\n                <rect width=\"300\" height=\"165\"/>\n            </clipPath>\n        </defs>\n        <g id=\"icono\" clip-path=\"url(#clip-icono)\">\n            <path id=\"Path_56\" data-name=\"Path 56\" d=\"M460.456,277.45c-3.78,16.728-8.792,33.035-20.449,46.127-8.972,10.076-18.668,19.517-28.192,29.091-16.178,16.266-32.348,32.544-48.767,48.565-10.008,9.765-22.626,11.868-34.5,6.494a30.449,30.449,0,0,1-17.945-29.464c.485-8.879,4.694-15.882,10.9-22.036q33.133-32.839,66.071-65.869c15.876-15.895,15.77-32.764-.294-48.594-22.333-22-44.808-43.866-67.068-65.944-10.076-10-12.372-22.988-6.784-35.077,5.313-11.5,17.106-19.345,29.55-17.4,6.892,1.077,14.614,4.149,19.6,8.834,24.151,22.674,47.631,46.072,71.091,69.477a87.938,87.938,0,0,1, '25.52,50.2,10.2,0,0,0,1.262,2.65Z\" transform=\"translate(416.616 -301.456) rotate(90)\" fill=\"#303232\"/>\n        </g>\n    </svg>\n    <div class=\"dropdown-content\">\n        <a href=\"#\" class=\"detalleReceta\" id=\"verDetalles-${receta.id_receta}\">Ver detalles</a>\n        <a href=\"#\" class=\"EditarReceta\" id=\"editarReceta-${receta.id_receta}\">Editar Receta</a>\n        <a href=\"#\" class=\"EditarPrecio\" id=\"editarPrecio-${receta.id_receta}\">Editar Precio</a>\n        \n    </div>\n</div>\n \t\n            </td>\n            <td></td>\n            <td></td>\n        `;\n\n        cuerpoTabla.appendChild(fila);\n\n        // Agregar Event Listeners\n        document.getElementById(`menuIcon-${receta.id_receta}`).addEventListener('click', (event) => mostrarMenu(event));\ndocument.getElementById(`verDetalles-${receta.id_receta}`).addEventListener('click', () => verDetalles(receta.id_receta, 'ver'));\ndocument.getElementById(`editarReceta-${receta.id_receta}`).addEventListener('click', () => verDetalles(receta.id_receta, 'editar'));\ndocument.getElementById(`editarPrecio-${receta.id_receta}`).addEventListener('click', () => verDetalles(receta.id_receta, 'precio'));\n    \n    });\n}\nwindow.mostrarMenu = (event) => {\n  // Oculta todos los menús desplegables\n  const dropdowns = document.querySelectorAll(\".dropdown-content\");\n  dropdowns.forEach((dropdown) => {\n    dropdown.style.display = \"none\";\n  });\n\n  // Encuentra el elemento dropdown más cercano\n  const dropdown = event.target.closest(\".dropdown\");\n  if (dropdown) {\n    const dropdownContent = dropdown.querySelector(\".dropdown-content\");\n\n    if (dropdownContent) {\n      // Muestra el menú desplegable correspondiente al elemento clicado\n      dropdownContent.style.display = \"block\";\n\n      // Establece un ancho fijo para el menú desplegable\n      dropdownContent.style.width = \"200px\"; // Puedes ajustar este valor según tus necesidades\n\n      // Obtiene las coordenadas absolutas del evento de clic en relación con la ventana del navegador\n      const clickX = event.clientX;\n      const clickY = event.clientY;\n\n      // Define un margen para asegurar que el menú desplegable esté completamente visible dentro de la ventana\n      const margin = 10; // Puedes ajustar este valor según tus necesidades\n\n      // Verifica si el menú desplegable excede los límites de la ventana y ajusta su posición si es necesario\n      const dropdownWidth = dropdownContent.offsetWidth;\n      const dropdownHeight = dropdownContent.offsetHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      let posX = clickX - dropdownWidth; // Ajuste para mostrar el menú más a la izquierda\n\n      if (posX < margin) { // Verifica si posX está dentro de los límites de la ventana\n        posX = margin;\n      }\n\n      let posY = clickY;\n\n      if (clickY + dropdownHeight + margin > windowHeight) {\n        posY = windowHeight - dropdownHeight - margin;\n      }\n\n      // Posiciona el menú desplegable en las coordenadas calculadas\n      dropdownContent.style.position = 'fixed';\n      dropdownContent.style.top = posY + 'px';\n      dropdownContent.style.left = posX + 'px';\n\n      // Cerrar el menú desplegable al hacer clic fuera de él\n      document.addEventListener(\"click\", closeDropdown);\n    } else {\n      console.error(\"No se encontró un elemento .dropdown-content dentro del dropdown\");\n    }\n  } else {\n    console.error(\"No se encontró un elemento .dropdown más cercano al objetivo del evento\");\n  }\n};\n\nfunction closeDropdown(event) {\n  const dropdowns = document.querySelectorAll(\".dropdown-content\");\n  dropdowns.forEach((dropdown) => {\n    if (!event.target.closest(\".dropdown-content\") && !event.target.closest(\".Icono-tabla\")) {\n      dropdown.style.display = \"none\";\n      document.removeEventListener(\"click\", closeDropdown); // Remueve el event listener para evitar múltiples llamadas\n    }\n  });\n}\n\n\nfunction getTipoTexto(tipo) {\nswitch (tipo) {\n    case 0:\n        return 'Todas';\n    case 1:\n        return 'Recetas';\n    case 2:\n        return 'Subrecetas';\n    case 3:\n        return 'Combo';\n    default:\n        return '';\n}\n}\n\nfunction getCategoriaTexto(categoria) {\nswitch (categoria) {\n    case 0:\n        return 'Todas';\n    case 1:\n        return 'Alimentos';\n    case 2:\n        return 'Bebidas';\n    case 3:\n        return 'Suministros';\n    default:\n        return '';\n}\n}\n\nfunction ObtenerFamilias() {\nconst token = runtime.globalVars.Token;\nif (!token) {\n    console.error(\"No se encontró el token en localStorage\");\n    return;\n}\n\nfetch(runtime.globalVars.apiUrl + '/web/familias/familias', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ token: token })\n})\n.then(response => {\n    if (response.ok) {\n        return response.json();\n    }\n    throw new Error('network response was not ok');\n})\n.then(data => {\n    if (data.response) {\n        actualizarOpcionesFamilia(data.data);\n    } else {\n        console.error(\"Error al obtener data familias: \", data.message);\n    }\n})\n.catch(error => {\n    console.error('Error en la obtención de datos: ', error);\n});\n}\n\nfunction actualizarOpcionesFamilia(familias) {\nconst familiaSelect = document.getElementById('input-familia');\nfamiliaSelect.innerHTML = '<option value=\"0\">Todas</option>'; // Limpiar las opciones existentes\n\nfamilias.forEach(familia => {\n    let option = document.createElement('option');\n    option.value = familia.id_familia;\n    option.textContent = familia.nombre;\n    familiaSelect.appendChild(option);\n});\n}\n\nfunction ObtenerSubfamilias(id_familia) {\nconst token = runtime.globalVars.Token;\nif (!token) {\n    console.error(\"No se encontró el token en localStorage\");\n    return;\n}\n\nfetch(runtime.globalVars.apiUrl + '/web/familias/subfamilias', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        token: token,\n        id_familia: id_familia\n    })\n})\n.then(response => {\n    if (response.ok) {\n        return response.json();\n    }\n    throw new Error('network response was not ok');\n})\n.then(data => {\n    if (data.response) {\n        actualizarOpcionesSubfamilia(data.data);\n        document.getElementById('subfamilia-group').style.display = 'block'; // Mostrar el select de subfamilias\n    } else {\n        console.error(\"Error al obtener data subfamilias: \", data.message);\n    }\n})\n.catch(error => {\n    console.error('Error en la obtención de datos: ', error);\n});\n}\n\nfunction actualizarOpcionesSubfamilia(subfamilias) {\nconst subfamiliaSelect = document.getElementById('input-subfamilia');\nsubfamiliaSelect.innerHTML = '<option value=\"0\">Todas</option>'; // Limpiar las opciones existentes\n\nsubfamilias.forEach(subfamilia => {\n    let option = document.createElement('option');\n    option.value = subfamilia.id_subfamilia;\n    option.textContent = subfamilia.nombre;\n    subfamiliaSelect.appendChild(option);\n});\n}\n\nfunction BuscarRecetas() {\nconst token = runtime.globalVars.Token;\nconst b = document.getElementById('input-buscar').value;\n\nif (!token) {\n    console.error(\"No se encontró el token en localStorage\");\n    return;\n}\n\nfetch(runtime.globalVars.apiUrl + '/web/recetas/filtra', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        token: token,\n        b: b\n    })\n})\n.then(response => {\n    if (response.ok) {\n        return response.json();\n    }\n    throw new Error('network response was not ok');\n})\n.then(data => {\n    if (data.response) {\n        actualizarTabla(data.data);\n    } else {\n        console.error(\"Error al buscar recetas: \", data.message);\n    }\n})\n.catch(error => {\n    console.error('Error en la búsqueda de recetas: ', error);\n});\n}\n\n// Variables globales\n\nconst updateModal = document.getElementById('detalleRecetas_updateModal');\nconst closeModalButtonUpdate = document.querySelector('#detalleRecetas_updateModal .close');\nconst buscarComponenteInput = document.getElementById('detalleRecetas_buscarComponenteInput');\nconst btnBuscarComponente = document.getElementById('detalleRecetas_btnBuscarComponente');\nconst buscarModal = document.getElementById('detalleRecetas_buscarModal');\nconst cerrarModalBtn = document.getElementById('detalleRecetas_cerrarModal');\n\n// Funciones de evento\ndocument.getElementById('detalleRecetas_receta-form').addEventListener('submit', function(event) {\n    event.preventDefault();\n    id_receta = document.getElementById('detalleRecetas_idRecetaInput').value;\n    console.log('ID de receta actualizado:', id_receta);\n    obtenerReceta();\n});\n\ndocument.getElementById('detalleRecetas_btnSiguiente').addEventListener('click', function() {\n    if (id_receta > 0) {\n        id_receta++;\n        console.log('ID de receta incrementado a:', id_receta);\n        obtenerReceta();\n    }\n});\n\ndocument.getElementById('detalleRecetas_btnAnterior').addEventListener('click', function() {\n    if (id_receta > 1) {\n        id_receta--;\n        console.log('ID de receta decrementado a:', id_receta);\n        obtenerReceta();\n    }\n});\n\nbtnBuscarComponente.addEventListener('click', function() {\n    buscarModal.style.display = 'block';\n    buscarComponente();\n});\n\n// Cerrar el modal de búsqueda haciendo clic fuera de él\nwindow.addEventListener('click', function(event) {\n    if (event.target === buscarModal) {\n        buscarModal.style.display = 'none';\n    }\n});\n\n// Actualizar componente\ndocument.getElementById('detalleRecetas_update-component-form').addEventListener('submit', function(event) {\n    event.preventDefault();\n    console.log('Intento de actualizar componente');\n    actualizarComponente();\n});\n\n// Cerrar el modal de actualización\nif (closeModalButtonUpdate) {\n    closeModalButtonUpdate.addEventListener('click', function() {\n        updateModal.style.display = \"none\";\n        console.log('Modal cerrado mediante botón de cerrar');\n    });\n}\n\n// Cerrar el modal de actualización haciendo clic fuera de él\nwindow.addEventListener('click', function(event) {\n    if (event.target === updateModal) {\n        updateModal.style.display = \"none\";\n        console.log('Modal cerrado haciendo clic fuera del modal');\n    }\n});\n\n// Manejo del modal de nuevo componente\n\n    const modalForm = document.getElementById('detalleRecetas_modalForm');\n    const nuevoModal = document.getElementById('detalleRecetas_nuevoModal');\n\n    if (modalForm) {\n        modalForm.addEventListener('submit', (event) => {\n            event.preventDefault(); // Prevenir el comportamiento por defecto del formulario\n\n            // Llamar a la función que maneja el envío del formulario\n            funcionAgregar();\n\n            // Cerrar el modal aquí si quieres\n            if (nuevoModal) {\n                nuevoModal.style.display = \"none\";\n            }\n        });\n    } else {\n        console.error('Formulario con ID \"detalleRecetas_modalForm\" no encontrado.');\n    }\n\n    // Manejo del botón de cierre del modal de nuevo componente\n    const closeModalButtonNuevo = document.querySelector('#detalleRecetas_nuevoModal .close');\n    if (closeModalButtonNuevo && nuevoModal) {\n        closeModalButtonNuevo.addEventListener('click', () => {\n            nuevoModal.style.display = 'none';\n        });\n    }\n\n\ndocument.getElementById('detalleRecetas_btnExportar').addEventListener('click', function() {\n    exportarReceta();\n});\n\ndocument.getElementById('detalleRecetas_btnRecalcular').addEventListener('click', function() {\n    recalcularReceta();\n});\n\nfunction verDetalles(id_receta, action) {\n    runtime.globalVars.id_receta = id_receta;\n    let token = runtime.globalVars.Token;\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    console.log('Obteniendo receta con ID:', id_receta);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/receta', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({ id_receta: id_receta, token: token })\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Datos recibidos:', data);\n\n        if (data.response) {\n            let receta = data.data[0];\n\n            console.log(\"Datos de la receta: \", receta);\n            \n            \n            // Determinar la acción a tomar en base al parámetro 'action'\n            if (action === 'editar') {\n                generarFormularioActualizarReceta(data.data[0]);\n            } else if (action === 'precio') {\n                generarFormularioActualizarPrecio(data.data[0]);\n            }\n\n            const recetaNombreElement = document.getElementById('detalleRecetas_recetaNombre');\nif (recetaNombreElement) {\n    recetaNombreElement.textContent = receta.nombre;\n} else {\n    console.error('Elemento con ID \"detalleRecetas_recetaNombre\" no encontrado.');\n}\n\nconst recetaCodigoElement = document.getElementById('detalleRecetas_recetaCodigo');\nif (recetaCodigoElement) {\n    recetaCodigoElement.textContent = receta.codigo;\n} else {\n    console.error('Elemento con ID \"detalleRecetas_recetaCodigo\" no encontrado.');\n}\n\nlet recetaResponse = document.getElementById('detalleRecetas_recetaResponse');\nif (recetaResponse) {\n    recetaResponse.innerHTML = '';\n\n    if (receta.componentes && Array.isArray(receta.componentes)) {\n        receta.componentes.forEach(componente => {\n            let row = document.createElement('tr');\n            row.innerHTML = '<td>' + componente.codigo + '</td>' +\n                '<td>' + componente.nombre + '</td>' +\n                '<td>' + componente.cantidad + '</td>' +\n                '<td>' + componente.unidad + '</td>' +\n                '<td>' + componente.precio + '</td>' +\n                '<td>' + componente.total + '</td>' +\n                '<td class=\"component-actions\">' +\n                    '<button class=\"edit\" id=\"edit-' + componente.id_componente + '\">' +\n                        '<span class=\"icon\">&#9998;</span>' +\n                    '</button>' +\n                    '<button class=\"delete\" id=\"delete-' + componente.id_componente + '\">' +\n                        '<span class=\"icon\">&#128465;</span>' +\n                    '</button>' +\n                '</td>';\n            recetaResponse.appendChild(row);\n\n            // Añadir los event listeners a los botones\n            document.getElementById('edit-' + componente.id_componente).addEventListener('click', function() {\n                mostrarModalActualizar(componente.id_componente, componente.codigo, componente.nombre, componente.cantidad, componente.unidad, componente.precio);\n            });\n            document.getElementById('delete-' + componente.id_componente).addEventListener('click', function() {\n                eliminarComponente(componente.id_componente);\n            });\n        });\n    } else {\n        console.error('Los componentes no están disponibles o no son un array:', receta.componentes);\n    }\n} else {\n    console.error('Elemento con ID \"detalleRecetas_recetaResponse\" no encontrado.');\n}\n\nconst porcentajeElement = document.getElementById('detalleRecetas_porcentaje1');\nif (porcentajeElement) {\n    porcentajeElement.textContent = receta.porcentaje + '%';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_porcentaje1\" no encontrado.');\n}\n\nconst factorElement = document.getElementById('detalleRecetas_factor1');\nif (factorElement) {\n    factorElement.textContent = receta.factor;\n} else {\n    console.error('Elemento con ID \"detalleRecetas_factor1\" no encontrado.');\n}\n\nconst ivaElement = document.getElementById('detalleRecetas_iva1');\nif (ivaElement) {\n    ivaElement.textContent = receta.precio_fijado_iva !== undefined ? '$' + receta.precio_fijado_iva.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_iva1\" no encontrado.');\n}\n\nconst precioSinIvaElement = document.getElementById('detalleRecetas_precioSinIva1');\nif (precioSinIvaElement) {\n    precioSinIvaElement.textContent = receta.precio_fijado_siva !== undefined ? '$' + receta.precio_fijado_siva.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioSinIva1\" no encontrado.');\n}\n\nconst precioFijadoElement = document.getElementById('detalleRecetas_precioFijado1');\nif (precioFijadoElement) {\n    precioFijadoElement.textContent = receta.precio_fijado !== undefined ? '$' + receta.precio_fijado.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioFijado1\" no encontrado.');\n}\n\nconst porcentaje1Element = document.getElementById('detalleRecetas_porcentaje1');\nif (porcentaje1Element) {\n    porcentaje1Element.textContent = receta.porcentaje + '%';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_porcentaje1\" no encontrado.');\n}\n\nconst factor1Element = document.getElementById('detalleRecetas_factor1');\nif (factor1Element) {\n    factor1Element.textContent = receta.factor;\n} else {\n    console.error('Elemento con ID \"detalleRecetas_factor1\" no encontrado.');\n}\n\nconst iva1Element = document.getElementById('detalleRecetas_iva1');\nif (iva1Element) {\n    iva1Element.textContent = receta.precio_fijado_iva !== undefined ? '$' + receta.precio_fijado_iva.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_iva1\" no encontrado.');\n}\n\nconst precioSinIva1Element = document.getElementById('detalleRecetas_precioSinIva1');\nif (precioSinIva1Element) {\n    precioSinIva1Element.textContent = receta.precio_fijado_siva !== undefined ? '$' + receta.precio_fijado_siva.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioSinIva1\" no encontrado.');\n}\n\nconst precioFijado1Element = document.getElementById('detalleRecetas_precioFijado1');\nif (precioFijado1Element) {\n    precioFijado1Element.textContent = receta.precio_fijado !== undefined ? '$' + receta.precio_fijado.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioFijado1\" no encontrado.');\n}\n\n// Precio\nconst porcentaje2ColorElement = document.getElementById('detalleRecetas_porcentaje2Color');\nif (porcentaje2ColorElement) {\n    const porcentaje2Color = receta.porcentaje2 <= receta.porcentaje ? 'green' : 'red';\n    porcentaje2ColorElement.className = porcentaje2Color;\n    const porcentaje2Element = document.getElementById('detalleRecetas_porcentaje2');\n    if (porcentaje2Element) {\n        porcentaje2Element.textContent = receta.porcentaje2 + '%';\n    } else {\n        console.error('Elemento con ID \"detalleRecetas_porcentaje2\" no encontrado.');\n    }\n} else {\n    console.error('Elemento con ID \"detalleRecetas_porcentaje2Color\" no encontrado.');\n}\n\nconst factor2Element = document.getElementById('detalleRecetas_factor2');\nif (factor2Element) {\n    factor2Element.textContent = receta.factor2 !== undefined ? receta.factor2.toFixed(2) : '0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_factor2\" no encontrado.');\n}\n\nconst iva2Element = document.getElementById('detalleRecetas_iva2');\nif (iva2Element) {\n    iva2Element.textContent = receta.iva + '%';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_iva2\" no encontrado.');\n}\n\nconst costoMateriaPrimaElement = document.getElementById('detalleRecetas_costoMateriaPrima');\nif (costoMateriaPrimaElement) {\n    costoMateriaPrimaElement.textContent = receta.costo !== undefined ? '$' + receta.costo.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_costoMateriaPrima\" no encontrado.');\n}\n\nconst costoPorcionElement = document.getElementById('detalleRecetas_costoPorPorcion');\nif (costoPorcionElement) {\n    costoPorcionElement.textContent = receta.costo_p !== undefined ? '$' + receta.costo_p.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_costoPorcion\" no encontrado.');\n}\n\nconst precioCalculadoElement = document.getElementById('detalleRecetas_precioCalculado');\nif (precioCalculadoElement) {\n    precioCalculadoElement.textContent = receta.precio_calculado !== undefined ? '$' + receta.precio_calculado.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioCalculado\" no encontrado.');\n}\n\nconst precioVentaCalculadoElement = document.getElementById('detalleRecetas_precioVentaCalculado');\nif (precioVentaCalculadoElement) {\n    precioVentaCalculadoElement.textContent = receta.precio_calculado_venta !== undefined ? '$' + receta.precio_calculado_venta.toFixed(2) : '$0.00';\n} else {\n    console.error('Elemento con ID \"detalleRecetas_precioVentaCalculado\" no encontrado.');\n}\n        }\n    })\n    .catch(error => {\n        console.error('Error al obtener los datos de la receta:', error);\n    });\n}\n\n    // Inicializar la búsqueda y la gestión de eventos\n    document.getElementById('detalleRecetas_buscarComponenteInput').addEventListener('input', function(event) {\n        buscarComponente(event);\n    });\n\n   \n    agregarEventoSeleccion();\n\n\nfunction buscarComponente(event) {\n    if (event) {\n        event.preventDefault();\n    }\n\n    let token = runtime.globalVars.Token;\n    let nombreComponente = document.getElementById('detalleRecetas_buscarComponenteInput').value.trim();\n    let id_receta = document.getElementById('detalleRecetas_idRecetaInput').value;\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    if (nombreComponente === '') {\n        limpiarResultados();\n        return;\n    }\n\n    // Guardar id_receta en localStorage\n    \n    let data = {\n        id_receta: id_receta,\n        token: token,\n        b: nombreComponente\n    };\n\n    console.log('Enviando datos:', data);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/busca', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify(data)\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Resultados de búsqueda:', data);\n        if (data.response) {\n            mostrarResultados(data.data);\n        } else {\n            console.log('Error al buscar componente: ' + data.message);\n            mostrarMensajeSinResultados();\n        }\n    })\n    .catch(error => {\n        console.error('Error al buscar componente:', error.message);\n    });\n}\n\nfunction limpiarResultados() {\n    document.getElementById('detalleRecetas_resultadosBusqueda').innerHTML = '';\n}\n\nfunction mostrarResultados(data) {\n    let resultados = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultados.innerHTML = ''; // Limpiar resultados anteriores\n\n    data.forEach(componente => {\n        let row = document.createElement('tr');\n        row.innerHTML = '<td>' + componente.codigo + '</td>' +\n            '<td>' + componente.nombre + '</td>' +\n            '<td>' + componente.cantidad + '</td>' +\n            '<td>' + componente.unidad + '</td>' +\n            '<td>' + componente.precio + '</td>' +\n            '<td>' + componente.total + '</td>' +\n            '<td>' +\n                '<button class=\"select\" id=\"select-' + componente.id_componente + '\">Seleccionar</button>' +\n            '</td>';\n        resultados.appendChild(row);\n\n        document.getElementById('select-' + componente.id_componente).addEventListener('click', function() {\n            seleccionarComponente(componente);\n        });\n    });\n}\n\nfunction mostrarMensajeSinResultados() {\n    let resultados = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultados.innerHTML = '<tr><td colspan=\"7\">No se encontraron resultados.</td></tr>';\n}\n\nfunction seleccionarComponente(componente) {\n    // Implementar lógica para seleccionar el componente\n    console.log('Componente seleccionado:', componente);\n}\n\nfunction agregarEventoSeleccion() {\n    // Agregar eventos a los botones de la interfaz\n    document.getElementById('detalleRecetas_btnBuscarComponente').addEventListener('click', buscarComponente);\n}\n\n\n\nfunction mostrarResultados(resultados) {\n    let resultadosContainer = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultadosContainer.innerHTML = '';\n\n    if (!Array.isArray(resultados) || resultados.length === 0) {\n        mostrarMensajeSinResultados();\n        return;\n    }\n\n    resultados.forEach(componente => {\n        let componenteDiv = crearComponenteDiv(componente);\n        resultadosContainer.appendChild(componenteDiv);\n    });\n\n    // Asegúrate de agregar eventos a los botones después de mostrarlos\n    agregarEventoSeleccion();\n}\n\nfunction mostrarMensajeSinResultados() {\n    let resultadosContainer = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultadosContainer.innerHTML = '<p>No se encontraron componentes con ese nombre.</p>';\n}\n\nfunction crearComponenteDiv(componente) {\n    let componenteDiv = document.createElement('div');\n    componenteDiv.classList.add('resultado-componente');\n\n    let codigoP = document.createElement('p');\n    codigoP.innerHTML = '<strong>Código:</strong> ' + componente.codigo;\n\n    let nombreP = document.createElement('p');\n    nombreP.innerHTML = '<strong>Nombre:</strong> ' + componente.nombre;\n\n    let cantidadP = document.createElement('p');\n    cantidadP.innerHTML = '<strong>Cantidad:</strong> ' + componente.cantidad + ' ' + componente.unidad;\n\n    let seleccionarBtn = document.createElement('button');\n    seleccionarBtn.textContent = 'Seleccionar';\n    seleccionarBtn.classList.add('seleccionar-componente-btn');\n\n    // Asigna el id_componente y otros datos necesarios como atributos data\n    seleccionarBtn.setAttribute('data-codigo', componente.codigo);\n    seleccionarBtn.setAttribute('data-id-inventario', componente.id_inventario); // Guarda el id_inventario\n    seleccionarBtn.setAttribute('data-nombre', componente.nombre);\n    seleccionarBtn.setAttribute('data-presentacion', componente.presentacion);\n    seleccionarBtn.setAttribute('data-tipo', componente.tipo);\n    seleccionarBtn.setAttribute('data-unidad', componente.unidad);\n\n    // Agregar logs para verificar los datos\n    console.log('Creando componente: Código=' + componente.codigo + ', ID Inventario=' + componente.id_inventario + ', Nombre=' + componente.nombre + ', Presentación=' + componente.presentacion + ', Tipo=' + componente.tipo + ', Unidad=' + componente.unidad);\n\n    componenteDiv.appendChild(codigoP);\n    componenteDiv.appendChild(nombreP);\n    componenteDiv.appendChild(cantidadP);\n    componenteDiv.appendChild(seleccionarBtn);\n\n    return componenteDiv;\n}\n\nfunction agregarEventoSeleccion() {\n    // Aquí se podría implementar lógica para agregar eventos a los botones \"Seleccionar\"\n    document.querySelectorAll('.seleccionar-componente-btn').forEach(button => {\n        button.addEventListener('click', function() {\n            let componente = {\n                codigo: this.getAttribute('data-codigo'),\n                id_inventario: this.getAttribute('data-id-inventario'),\n                nombre: this.getAttribute('data-nombre'),\n                presentacion: this.getAttribute('data-presentacion'),\n                tipo: this.getAttribute('data-tipo'),\n                unidad: this.getAttribute('data-unidad')\n            };\n            seleccionarComponente(componente);\n        });\n    });\n}\n\nfunction seleccionarComponente(componente) {\n    // Implementar la lógica para manejar la selección del componente\n    console.log('Componente seleccionado:', componente);\n}\n\n\n\n\nfunction limpiarResultados() {\n    let resultadosContainer = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultadosContainer.innerHTML = '';\n}\n\nfunction mostrarResultados(resultados) {\n    let resultadosContainer = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultadosContainer.innerHTML = '';\n\n    if (!Array.isArray(resultados) || resultados.length === 0) {\n        mostrarMensajeSinResultados();\n        return;\n    }\n\n    resultados.forEach(componente => {\n        let componenteDiv = crearComponenteDiv(componente);\n        resultadosContainer.appendChild(componenteDiv);\n    });\n\n    agregarEventoSeleccion();\n}\n\nfunction mostrarMensajeSinResultados() {\n    let resultadosContainer = document.getElementById('detalleRecetas_resultadosBusqueda');\n    resultadosContainer.innerHTML = '<p>No se encontraron componentes con ese nombre.</p>';\n}\n\nfunction agregarEventoSeleccion() {\n    let botonesSeleccionar = document.querySelectorAll('.seleccionar-componente-btn');\n\n    botonesSeleccionar.forEach(boton => {\n        boton.addEventListener('click', () => {\n            let id_inventario = boton.getAttribute('data-id-inventario');\n            let codigo_componente = boton.getAttribute('data-codigo');\n            let nombre_componente = boton.getAttribute('data-nombre');\n            let cantidad_componente = boton.getAttribute('data-cantidad');\n            let unidad_componente = boton.getAttribute('data-unidad');\n            let tipo = boton.getAttribute('data-tipo');\n\n            console.log('Componente seleccionado con ID de Inventario: ' + id_inventario);\n            localStorage.setItem('id_inventario', id_inventario);\n            localStorage.setItem('tipo', tipo);\n            localStorage.setItem('unidad', unidad_componente);\n\n            let nuevoComponenteInfo = document.getElementById('detalleRecetas_nuevoComponenteInfo');\n            if (nuevoComponenteInfo) {\n                let componenteInfo = \n                    '<p><strong>ID Inventario:</strong> ' + id_inventario + '</p>' +\n                    '<p><strong>Código:</strong> ' + codigo_componente + '</p>' +\n                    '<p><strong>Nombre:</strong> ' + nombre_componente + '</p>' +\n                    '<p><strong>Cantidad:</strong> ' + cantidad_componente + ' ' + unidad_componente + '</p>';\n                nuevoComponenteInfo.innerHTML = componenteInfo;\n            }\n\n            localStorage.setItem('id_inventario_seleccionado', id_inventario);\n\n            let buscarModal = document.getElementById('detalleRecetas_buscarModal');\n            let nuevoModal = document.getElementById('detalleRecetas_nuevoModal'); // Asegúrate de que `nuevoModal` está definido correctamente\n            if (buscarModal && nuevoModal) {\n                buscarModal.style.display = 'none';\n                nuevoModal.style.display = 'block';\n            }\n        });\n    });\n}\n\nfunction crearComponenteDiv(componente) {\n    let componenteDiv = document.createElement('div');\n    componenteDiv.classList.add('resultado-componente');\n\n    let codigoP = document.createElement('p');\n    codigoP.innerHTML = '<strong>Código:</strong> ' + componente.codigo;\n\n    let nombreP = document.createElement('p');\n    nombreP.innerHTML = '<strong>Nombre:</strong> ' + componente.nombre;\n\n    let cantidadP = document.createElement('p');\n    cantidadP.innerHTML = '<strong>Cantidad:</strong> ' + componente.cantidad + ' ' + componente.unidad;\n\n    let seleccionarBtn = document.createElement('button');\n    seleccionarBtn.textContent = 'Seleccionar';\n    seleccionarBtn.classList.add('seleccionar-componente-btn');\n\n    // Asigna el id_componente y otros datos necesarios como atributos data\n    seleccionarBtn.setAttribute('data-codigo', componente.codigo);\n    seleccionarBtn.setAttribute('data-id-inventario', componente.id_inventario);\n    seleccionarBtn.setAttribute('data-nombre', componente.nombre);\n    seleccionarBtn.setAttribute('data-cantidad', componente.cantidad); // Añadido\n    seleccionarBtn.setAttribute('data-unidad', componente.unidad);\n    seleccionarBtn.setAttribute('data-tipo', componente.tipo);\n\n    componenteDiv.appendChild(codigoP);\n    componenteDiv.appendChild(nombreP);\n    componenteDiv.appendChild(cantidadP);\n    componenteDiv.appendChild(seleccionarBtn);\n\n    return componenteDiv;\n}\n\n\nfunction funcionAgregar() {\n    let cantidad = parseFloat(document.getElementById('detalleRecetas_cantidad').value);\n    let unidad = 1;\n    let sub_receta = localStorage.getItem('id_subreceta');\n    const tipo = localStorage.getItem(\"tipo\");\n    const id_receta = localStorage.getItem(\"id_receta\");\n    const id_inventario = localStorage.getItem(\"id_inventario\");\n    const id_subreceta = localStorage.getItem(\"id_subreceta\");\n\n    if (!id_receta) {\n        console.error('No se encontró id_receta en localStorage.');\n        return;\n    }\n\n    if ((tipo === '1' || tipo === '2' || tipo === '3') && !id_inventario) {\n        console.error('No se encontró id_inventario en localStorage.');\n        return;\n    }\n\n    if (tipo === '4' && !id_subreceta) {\n        console.error('No se encontró id_subreceta en localStorage.');\n        return;\n    }\n\n    // Obtener el token\n    const token = runtime.globalVars.Token;\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    // Construir el objeto con los datos a enviar a la API\n    const data = {\n        token: token,\n        id_receta: id_receta,\n        tipo: tipo,\n        cantidad: cantidad,\n        unidad: unidad,\n        id_subreceta: id_subreceta\n    };\n\n    // Agregar id_inventario o id_subreceta según el tipo\n    if (tipo === '1' || tipo === '2' || tipo === '3') {\n        data.id_inventario = id_inventario;\n    } else if (tipo === '4') {\n        data.id_subreceta = id_subreceta;\n    }\n\n    console.log('Enviando datos a la API:', data);\n\n    // Enviar los datos a la API\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/creaComponente', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify(data)\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Respuesta al agregar componente:', data);\n\n        // Cierra el modal\n        const nuevoModal = document.getElementById('detalleRecetas_nuevoModal');\n        if (nuevoModal) {\n            nuevoModal.style.display = 'none';\n        }\n\n        // Actualiza la pantalla de recetas\n        obtenerReceta();\n    })\n    .catch(error => {\n        console.error('Error al agregar el componente:', error.message);\n    });\n}\n\nfunction mostrarModalActualizar(id, codigo, nombre, cantidad, unidad, precio) {\n    console.log('Mostrando modal para actualizar componente:', id);\n\n    // Actualiza los campos del formulario modal\n    document.getElementById('detalleRecetas_updateIdComponente').value = id;\n    document.getElementById('detalleRecetas_updateCodigoComponente').value = codigo;\n    document.getElementById('detalleRecetas_updateNombreComponente').value = nombre;\n    document.getElementById('detalleRecetas_updateCantidadComponente').value = cantidad;\n    document.getElementById('detalleRecetas_updateUnidadComponente').value = unidad;\n    document.getElementById('detalleRecetas_updatePrecioComponente').value = precio;\n\n    // Muestra el modal\n    const updateModal = document.getElementById('detalleRecetas_updateModal');\n    if (updateModal) {\n        updateModal.style.display = 'block';\n    } else {\n        console.error('No se encontró el modal de actualización.');\n    }\n}\n\n\n\nfunction actualizarComponente() {\n    let token = runtime.globalVars.Token;\n    const id_receta = id_receta;\n\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    let id = document.getElementById('detalleRecetas_updateIdComponente').value;\n    let cantidad = parseFloat(document.getElementById('detalleRecetas_updateCantidadComponente').value);\n\n    if (!id || isNaN(cantidad)) {\n        console.error('Por favor complete todos los campos correctamente.');\n        return;\n    }\n\n    if (!id_receta) {\n        console.error('No se encontró id_receta en localStorage.');\n        return;\n    }\n\n    console.log('Actualizando componente con ID:', id);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/actualizaComponente', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n            id_receta: id_receta,\n            token: token,\n            id_componente: id,\n            cantidad: cantidad\n        })\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Respuesta al actualizar componente:', data);\n        obtenerReceta();\n        const updateModal = document.getElementById('detalleRecetas_updateModal');\n        if (updateModal) {\n            updateModal.style.display = 'none';\n        } else {\n            console.error('No se encontró el modal de actualización.');\n        }\n    })\n    .catch(error => {\n        console.error('Error al actualizar el componente:', error.message);\n    });\n}\n\n\n\nfunction eliminarComponente(id) {\n    let token = runtime.globalVars.Token;\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    const id_receta = id_receta;\n\n    if (!id_receta) {\n        console.error('No se encontró id_receta en localStorage.');\n        return;\n    }\n\n    console.log('Eliminando componente con ID: ' + id);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/eliminaComponente', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n            id_receta: id_receta,\n            token: token,\n            id_componente: id\n        })\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Respuesta al eliminar componente:', data);\n        obtenerReceta();\n    })\n    .catch(error => {\n        console.error('Error al eliminar el componente:', error.message);\n    });\n}\n\nfunction actualizar() {\n    // Aquí deberías implementar la lógica específica para la función actualizar.\n    // Actualmente está vacía y necesita ser definida según los requerimientos.\n    console.log('Función actualizar llamada. Implementa la lógica aquí.');\n}\n\nfunction recalcularReceta() {\n    let token = runtime.globalVars.Token;\n    let id_receta = id_receta;\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    if (!id_receta) {\n        console.error('No se encontró id_receta en localStorage.');\n        return;\n    }\n\n    console.log('Recalculando receta con ID: ' + id_receta);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/recalcula', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + token\n        },\n        body: JSON.stringify({\n            id_receta: id_receta,\n            token: token\n        })\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.json();\n    })\n    .then(data => {\n        console.log('Respuesta al recalcular receta:', data);\n        obtenerReceta(); // Asumiendo que `obtenerReceta` está definida para actualizar la interfaz de usuario.\n    })\n    .catch(error => {\n        console.error('Error al recalcular la receta:', error.message);\n    });\n}\n\nfunction exportarReceta() {\n    let token = runtime.globalVars.Token;\n\n    if (!token) {\n        console.error('No hay token disponible, por favor inicia sesión primero.');\n        return;\n    }\n\n    // Construye la URL para la exportación de la receta con el token incluido\n    let exportUrl = runtime.globalVars.apiUrl + '/web/recetas/exporta/' + token;\n\n    fetch(exportUrl, {\n        method: 'GET',\n        headers: {\n            'Authorization': 'Bearer ' + token\n        }\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error('Error en la solicitud: Estado ' + response.status + ' - ' + response.statusText);\n            throw new Error('La solicitud falló con el estado ' + response.status);\n        }\n        return response.blob();\n    })\n    .then(blob => {\n        // Crear un objeto URL del blob y crear un enlace de descarga\n        const url = window.URL.createObjectURL(new Blob([blob]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'receta-exportada.xlsx'); // Nombre del archivo Excel\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n        window.URL.revokeObjectURL(url); // Limpia el objeto URL después de la descarga\n    })\n    .catch(error => {\n        console.error('Error al exportar la receta:', error.message);\n    });\n}\n\n\nfunction generarFormularioActualizarReceta(data) {\n    const formContainer = document.getElementById('formContainer');\n    formContainer.innerHTML = `\n        <form id=\"formActualizarReceta\">\n            <label for=\"codigoInput\">Código:</label>\n            <input id=\"codigoInput\" type=\"text\" value=\"${data.codigo}\" required />\n            \n            <label for=\"nombreInput\">Nombre:</label>\n            <input id=\"nombreInput\" type=\"text\" value=\"${data.nombre}\" required />\n            \n            <label for=\"categoriaSelect\">Categoría:</label>\n            <select id=\"categoriaSelect\">\n                <option value=\"1\" ${data.categoria == 1 ? 'selected' : ''}>Bebidas</option>\n                <option value=\"2\" ${data.categoria == 2 ? 'selected' : ''}>Alimentos</option>\n                <option value=\"3\" ${data.categoria == 3 ? 'selected' : ''}>Suministros</option>\n            </select>\n            \n            <label for=\"familiaSelect\">Familia:</label>\n            <select id=\"familiaSelect\">\n                <!-- Opciones de familia -->\n            </select>\n            \n            <label for=\"subfamiliaSelect\">Subfamilia:</label>\n            <select id=\"subfamiliaSelect\">\n                <!-- Opciones de subfamilia -->\n            </select>\n            \n            <label for=\"imagenInput\">Imagen:</label>\n            <input id=\"imagenInput\" type=\"text\" value=\"${data.imagen}\" required />\n            <input type=\"hidden\" id=\"tipoInput\" value=\"${data.tipo}\" />\n            <input type=\"hidden\" id=\"porcionesInput\" value=\"${data.porciones}\" />\n            <input type=\"hidden\" id=\"unidadInput\" value=\"${data.unidad}\" />\n            <input type=\"hidden\" id=\"calculoInput\" value=\"${data.calculo}\" />\n            <input type=\"hidden\" id=\"porcentajeInput\" value=\"${data.porcentaje}\" />\n            <input type=\"hidden\" id=\"factorInput\" value=\"${data.factor}\" />\n            <input type=\"hidden\" id=\"comisionTipoInput\" value=\"${data.comision_tipo}\" />\n            <input type=\"hidden\" id=\"comisionInput\" value=\"${data.comision}\" />\n            <input type=\"hidden\" id=\"maximoExtrasInput\" value=\"${data.maximo_extras}\" />\n            <input type=\"hidden\" id=\"precioFijoReceta\" value=\"${data.precio_fijado}\" />\n            <button class=\"ActualizarReceta\" type=\"submit\">Actualizar Receta</button>\n        </form>\n    `;\n    \n    document.getElementById('formActualizarReceta').onsubmit = (e) => {\n        e.preventDefault();\n        actualizarReceta(data);\n    };\n}\n\nfunction actualizarReceta(data) {\n    const token = runtime.globalVars.Token;\n    if (!token) {\n        console.error(\"No se encontró el token en localStorage\");\n        return;\n    }\n\n    const tipo = document.getElementById('tipoInput').value;\n    const codigo = document.getElementById('codigoInput').value;\n    const nombre = document.getElementById('nombreInput').value;\n    const categoria = document.getElementById('categoriaSelect').value;\n    const id_familia = document.getElementById('familiaSelect').value;\n    const id_subfamilia = document.getElementById('subfamiliaSelect').value;\n    const imagen = document.getElementById('imagenInput').value;\n    const porciones = document.getElementById('porcionesInput').value;\n    const unidad = document.getElementById('unidadInput').value;\n    const calculo = document.getElementById('calculoInput').value;\n    const porcentaje = document.getElementById('porcentajeInput').value;\n    const factor = document.getElementById('factorInput').value;\n    const comision_tipo = document.getElementById('comisionTipoInput').value;\n    const comision = document.getElementById('comisionInput').value;\n    const maximo_extras = document.getElementById('maximoExtrasInput').value;\n    const precio_fijado = document.getElementById('precioFijoReceta').value;\n\n    console.log(\"Token:\", token);\n    console.log(\"ID Receta:\", runtime.globalVars.id_receta);\n    console.log(\"ID Familia:\", id_familia);\n    console.log(\"ID Subfamilia:\", id_subfamilia);\n    console.log(\"Categoría Opcional:\", categoria);\n    console.log(\"Tipo:\", tipo);\n    console.log(\"Código:\", codigo);\n    console.log(\"Nombre:\", nombre);\n    console.log(\"Porciones:\", porciones);\n    console.log(\"Unidad:\", unidad);\n    console.log(\"Cálculo:\", calculo);\n    console.log(\"Porcentaje:\", porcentaje);\n    console.log(\"Factor:\", factor);\n    console.log(\"Precio Fijado:\", precio_fijado);\n    console.log(\"Comisión Tipo:\", comision_tipo);\n    console.log(\"Comisión:\", comision);\n    console.log(\"Imagen:\", imagen);\n    console.log(\"Máximo Extras:\", maximo_extras);\n\n    fetch(runtime.globalVars.apiUrl + '/web/recetas/actualiza', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            token: token,\n            id_receta: runtime.globalVars.id_receta,\n            id_familia: id_familia,\n            id_subfamilia: id_subfamilia,\n            categoria: categoria,\n            tipo: tipo,\n            codigo: codigo,\n            nombre: nombre,\n            porciones: porciones,\n            unidad: unidad,\n            calculo: calculo,\n            porcentaje: porcentaje,\n            factor: factor,\n            precio_fijado: precio_fijado,\n            comision_tipo: comision_tipo,\n            comision: comision,\n            imagen: imagen,\n            maximo_extras: maximo_extras\n        })\n    })\n    .then(response => response.ok ? response.json() : Promise.reject('Network response was not ok'))\n    .then(data => data.response ? console.log(\"Receta actualizada exitosamente\") : console.error(\"Error al actualizar receta: \", data.message))\n    .catch(error => console.error('Error en la actualización de datos: ', error));\n}\n\nfunction generarFormularioActualizarPrecio(data) {\n    const formContainer = document.getElementById('formContainer');\n    formContainer.innerHTML = `\n        <form id=\"formActualizarPrecio\">\n            <label for=\"precioFijadoInput\">Precio Fijado:</label>\n            <input id=\"precioFijadoInput\" type=\"text\" value=\"${data.precio_fijado}\" required />\n            \n            <input type=\"hidden\" id=\"idRecetaInput\" value=\"${data.id_receta}\" />\n            <input type=\"hidden\" id=\"idFamiliaInput\"\" />\n            <input type=\"hidden\" id=\"idSubfamiliaInput\" \" />\n            <input type=\"hidden\" id=\"categoriaInput\" value=\"${data.categoria}\" />\n            <input type=\"hidden\" id=\"tipoInput\" value=\"${data.tipo}\" />\n            <input type=\"hidden\" id=\"codigoInput\" value=\"${data.codigo}\" />\n            <input type=\"hidden\" id=\"nombreInput\" value=\"${data.nombre}\" />\n            <input type=\"hidden\" id=\"porcionesInput\" value=\"${data.porciones}\" />\n            <input type=\"hidden\" id=\"unidadInput\" value=\"${data.unidad}\" />\n            <input type=\"hidden\" id=\"calculoInput\" value=\"${data.calculo}\" />\n            <input type=\"hidden\" id=\"porcentajeInput\" value=\"${\n\t\t\tdata.porcentaje}\" />\n            <input type=\"hidden\" id=\"factorInput\" value=\"${data.factor}\" />\n            <input type=\"hidden\" id=\"comisionTipoInput\" value=\"${data.comision_tipo}\" />\n            <input type=\"hidden\" id=\"comisionInput\" value=\"${data.comision}\" />\n            <input type=\"hidden\" id=\"imagenInput\" value=\"${data.imagen}\" />\n            <input type=\"hidden\" id=\"maximoExtrasInput\" value=\"${data.maximo_extras}\" />\n            \n            <button class=\"ActualizarReceta\" type=\"submit\">Actualizar Precio</button>\n        </form>\n    `;\n    \n    document.getElementById('formActualizarPrecio').onsubmit = (e) => {\n        e.preventDefault();\n        actualizarPrecio(data);\n    };\n\n    runtime.callFunction('MostrarCapa', 'editReceta');\n}\n\nfunction actualizarPrecio(data) {\n    const token = runtime.globalVars.Token;\n    if (!token) {\n        console.error(\"No se encontró el token en localStorage\");\n        return;\n    }\n\n    const precio_fijado = document.getElementById('precioFijadoInput').value;\n    const id_familia = document.getElementById('idFamiliaInput').value;\n    const id_subfamilia = document.getElementById('idSubfamiliaInput').value;\n    const categoria = document.getElementById('categoriaInput').value;\n    const tipo = document.getElementById('tipoInput').value;\n    const codigo = document.getElementById('codigoInput').value;\n    const nombre = document.getElementById('nombreInput').value;\n    const porciones = document.getElementById('porcionesInput').value;\n    const unidad = document.getElementById('unidadInput').value;\n    const calculo = document.getElementById('calculoInput').value;\n    const porcentaje = document.getElementById('porcentajeInput').value;\n    const factor = document.getElementById('factorInput').value;\n    const comision_tipo = document.getElementById('comisionTipoInput').value;\n    const comision = document.getElementById('comisionInput').value;\n    const imagen = document.getElementById('imagenInput').value;\n    const maximo_extras = document.getElementById('maximoExtrasInput').value;\n\n    console.log(\"Token:\", token);\n    console.log(\"Precio Fijado:\", precio_fijado);\n    console.log(\"ID Receta:\", runtime.globalVars.id_receta);\n    console.log(\"ID Familia:\", id_familia);\n    console.log(\"ID Subfamilia:\", id_subfamilia);\n    console.log(\"Categoría:\", categoria);\n    console.log(\"Tipo:\", tipo);\n    console.log(\"Código:\", codigo);\n    console.log(\"Nombre:\", nombre);\n    console.log(\"Porciones:\", porciones);\n    console.log(\"Unidad:\", unidad);\n    console.log(\"Cálculo:\", calculo);\n    console.log(\"Porcentaje:\", porcentaje);\n    console.log(\"Factor:\", factor);\n    console.log(\"Comisión Tipo:\", comision_tipo);\n    console.log(\"Comisión:\", comision);\n    console.log(\"Imagen:\", imagen);\n    console.log(\"Máximo Extras:\", maximo_extras);\n\n     fetch(runtime.globalVars.apiUrl + '/web/recetas/actualiza', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            token: token,\n            id_receta: runtime.globalVars.id_receta,\n            id_familia: id_familia,\n            id_subfamilia: id_subfamilia,\n            categoria: categoria,\n            tipo: tipo,\n            codigo: codigo,\n            nombre: nombre,\n            porciones: porciones,\n            unidad: unidad,\n            calculo: calculo,\n            porcentaje: porcentaje,\n            factor: factor,\n            precio_fijado: precio_fijado,\n            comision_tipo: comision_tipo,\n            comision: comision,\n            imagen: imagen,\n            maximo_extras: maximo_extras\n        })\n    })\n    .then(response => response.ok ? response.json() : Promise.reject('Network response was not ok'))\n    .then(data => data.response ? console.log(\"Precio actualizado exitosamente\") : console.error(\"Error al actualizar precio: \", data.message))\n    .catch(error => console.error('Error en la actualización de datos: ', error));\n}\n\n\n\n"
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 398260002952269,
					"parameters": {
						"layer": "\"EditReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 666874113692072,
					"parameters": {
						"layer": "\"detalleReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 684820357138752,
					"parameters": {
						"layer": "\"prueba\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 964925721229206,
					"parameters": {
						"layer": "\"CreaReceta\"",
						"visibility": "invisible"
					}
				},
				{
					"id": "set-layer-visible",
					"objectClass": "System",
					"sid": 833904794522236,
					"parameters": {
						"layer": "\"ClonaReceta\"",
						"visibility": "invisible"
					}
				}
			],
			"sid": 841144794120534
		},
		{
			"eventType": "script",
			"script": ""
		},
		{
			"eventType": "block",
			"conditions": [
				{
					"id": "on-clicked-id",
					"objectClass": "CreaRecetaHTML",
					"sid": 206266480844765,
					"parameters": {
						"id": "\"crear-receta-button\""
					}
				}
			],
			"actions": [
				{
					"type": "script",
					"script": "let token= runtime.globalVars.Token;\nlet apiURL = runtime.globalVars.apiUrl;\n mainFuntionCreaReceta(token, apiURL);"
				}
			],
			"sid": 473098958529374
		},
		{
			"eventType": "group",
			"disabled": false,
			"title": "EnlacesHTML",
			"description": "",
			"isActiveOnStart": true,
			"children": [
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-clicked-class",
							"objectClass": "TableRecetas",
							"sid": 658097345401057,
							"parameters": {
								"class": "\"EditarReceta\""
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 449824698058797,
							"parameters": {
								"layer": "\"EditReceta\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 518003690510249,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 709652643281185,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 861468315435195,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": true
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 739116534634513,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						}
					],
					"sid": 573675132873214
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-clicked-class",
							"objectClass": "TableRecetas",
							"sid": 623730022873973,
							"parameters": {
								"class": "\"EditarPrecio\""
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 430364832843663,
							"parameters": {
								"layer": "\"EditReceta\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 590267466536823,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 882498422632354,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 118311448439315,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": true
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 777514607814136,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						}
					],
					"sid": 955910562263350
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-clicked-class",
							"objectClass": "TableRecetas",
							"sid": 424578378501996,
							"parameters": {
								"class": "\"detalleReceta\""
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 622318502454305,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 838176975973317,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 496874441446359,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 574732431119793,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": true
							}
						}
					],
					"sid": 627053140995070
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-touched-object",
							"objectClass": "Touch",
							"sid": 139715334562325,
							"parameters": {
								"object": "CloseActualizaReceta",
								"type": "start"
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 318304258972568,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 969565495174962,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 296971412424081,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 998764066515871,
							"parameters": {
								"layer": "\"EditReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 231225631787867,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 277132460585532,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": true
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 866840522228550,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 595730503739770,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 880840098275598,
							"parameters": {
								"layer": "\"ClonaReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 819313068967124,
							"parameters": {
								"layer": "\"ClonaReceta\"",
								"interactive": false
							}
						}
					],
					"sid": 131732943555136
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-clicked-id",
							"objectClass": "SideMenuRecetas",
							"sid": 377728122684552,
							"parameters": {
								"id": "\"CreaReceta\""
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 805742021103180,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 107474979267514,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 327230895648766,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 103047152138136,
							"parameters": {
								"layer": "\"EditReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 502617250346397,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 516819578156028,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 918528815455557,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 500270552842465,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"interactive": true
							}
						}
					],
					"sid": 688570899499817
				},
				{
					"eventType": "block",
					"conditions": [
						{
							"id": "on-clicked-id",
							"objectClass": "SideMenuRecetas",
							"sid": 307922211629879,
							"parameters": {
								"id": "\"ClonaReceta\""
							}
						}
					],
					"actions": [
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 716705313237592,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 938215309321411,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 183954746848262,
							"parameters": {
								"layer": "\"EditReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 223601231029653,
							"parameters": {
								"layer": "\"EditReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 401068308492584,
							"parameters": {
								"layer": "\"Recetas\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 426889426409892,
							"parameters": {
								"layer": "\"detalleReceta\"",
								"visibility": "invisible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 473867680270904,
							"parameters": {
								"layer": "\"Recetas\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 633948795936623,
							"parameters": {
								"layer": "\"CreaReceta\"",
								"interactive": false
							}
						},
						{
							"id": "set-layer-visible",
							"objectClass": "System",
							"sid": 279905307019931,
							"parameters": {
								"layer": "\"ClonaReceta\"",
								"visibility": "visible"
							}
						},
						{
							"id": "set-layer-interactive",
							"objectClass": "System",
							"sid": 889007620680471,
							"parameters": {
								"layer": "\"ClonaReceta\"",
								"interactive": true
							}
						}
					],
					"sid": 681210590641696
				}
			],
			"sid": 256069922102205
		}
	],
	"sid": 815516096939219
}